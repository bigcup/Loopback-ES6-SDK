<% relationNames.forEach(function(relation) { -%>
import <%- relation %> from './<%- relation %>';
<% }) -%>
import { fetchJson, queryParams } from '../utils/fetch';

const api = '<%- urlBase -%>';

class <%- modelname %> {
  constructor(model) {
    Object.assign(this, model);
  }

  static api = api;
  static baseUrl() {
    return `${this.api}${this.resource}`;
  }
  static resource = '<%- resource %>';

  static fetch(url, options) {
    return fetchJson(url, options).then(
      ({ status, headers, body, json }) => json
    );
  }
<% methods.forEach(function(method) { 
  var urlMethod;
  if (method.isStatic) {
    urlMethod = 'this.baseUrl()'
    fetchMethod = 'this.fetch'
  } else {
    urlMethod = 'this.constructor.baseUrl()'
    fetchMethod = 'this.constructor.fetch'    
  }
%>
  <%- method.isStatic ? 'static ' : '' %><%- method.name + '(' + method.arguments.join(', ') + ') {' %>
    let url = `${<%- urlMethod %>}<%- method.urlTemplate -%>`;
<% if (method.body && typeof method.body === 'string') { %>
    let body = <%- method.body -%>;
<% } else if (Array.isArray(method.body)) { -%>
    let body = { <%- method.body.join(', ') -%> };
<% } %>
    return <%- fetchMethod %>(url, {
      method: '<%- method.methodVerb %>',
<% if (method.body) { -%>
      body: JSON.stringify(body)
<% } -%>
    }).then(res => {
<% if (method.isReturnArray && method.returnsClass) { -%>
      return res.map(i => new <%- method.returnsClass %>(i));
<% } else if (method.returnsClass) { -%>
      return new <%- method.returnsClass %>(res);
<% } else { -%>
      return res;
<% } -%>
    }).catch(err => Promise.reject(err));
  }
<% }) %>
}

export default <%- modelname %>;
